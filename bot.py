from datetime import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import *
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='5838852905:AAHT9c3S23A1V_rDTsNc73_B-MPQVhbBNAM')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(Command('start'))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    menu_button = types.InlineKeyboardButton("–ú–µ–Ω—é üìñ", callback_data='menu')
    book_button = types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üìÖ", callback_data='book')
    delivery_button = types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery')
    support_button = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí¨", callback_data='support')
    keyboard.add(menu_button, book_button, delivery_button, support_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await dp.current_state().reset_state(with_data=False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.callback_query_handler(text='menu')
async def process_menu(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –±–ª—é–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = get_categories()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    pairs = [categories[i:i+2] for i in range(0, len(categories), 2)]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for pair in pairs:
        buttons = [types.KeyboardButton(category) for category in pair]
        keyboard.row(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await MenuSelection.category.set()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
class MenuSelection(StatesGroup):
    category = State()
    dish = State()
    table_number = State()
    payment_method = State()
    dish_id = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
@dp.message_handler(state=MenuSelection.category)
async def process_dish_category(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        await cmd_start(message)
        return

    async with state.proxy() as data:
        data['category'] = message.text

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        categories = get_categories()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if message.text not in categories:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dishes = get_dishes_by_category(message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–ª—é–¥
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±–ª—é–¥ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    for dish_id, dish_name in dishes:
        keyboard.add(types.KeyboardButton(str(dish_id) + ' - ' + dish_name))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}:".format(message.text), reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await MenuSelection.dish.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@dp.message_handler(state=MenuSelection.dish)
async def process_dish_selection(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        await cmd_start(message)
        return

    async with state.proxy() as data:
        data['dish'] = message.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    dish_id = int(message.text.split()[0])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ –ø–æ –µ–≥–æ id
    dish = get_dish_by_id(dish_id)

    if dish:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ
        dish_name = dish[1]
        ingredients = dish[3]
        price = dish[4]
        availability = dish[5]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–µ
        dish_info = "üçΩ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {}\n–¶–µ–Ω–∞: {}\n–ù–∞–ª–∏—á–∏–µ: {}".format(dish_name, ingredients, price,
                                                                                  availability)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        message_text = "{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:".format(dish_info)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = types.InlineKeyboardMarkup()
        category_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="select_category")
        order_dish_button = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –±–ª—é–¥–æ", callback_data=f"order_dish {dish_id}")
        keyboard.add(category_button, order_dish_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(message_text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@dp.callback_query_handler(text='select_category')
async def process_select_category(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –±–ª—é–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = get_categories()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    pairs = [categories[i:i + 2] for i in range(0, len(categories), 2)]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for pair in pairs:
        buttons = [types.KeyboardButton(category) for category in pair]
        keyboard.row(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await MenuSelection.category.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –±–ª—é–¥–æ"
@dp.callback_query_handler(lambda c: c.data.startswith('order_dish'))
async def process_order_dish(callback_query: types.CallbackQuery, state: FSMContext):
    dish_id = int(callback_query.data.split()[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π dish_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['dish_id'] = dish_id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞:")
    await MenuSelection.table_number.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞
@dp.message_handler(state=MenuSelection.table_number)
async def process_table_number(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return

    table_number = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 20
    if not table_number.isdigit() or not (1 <= int(table_number) <= 20):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞. –£ –Ω–∞—Å 20 —Å—Ç–æ–ª–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cash_button = types.KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ")
    card_button = types.KeyboardButton("–ö–∞—Ä—Ç–∞")
    keyboard.add(cash_button, card_button)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await MenuSelection.payment_method.set()
    await state.update_data(table_number=table_number, datetime=current_datetime)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=MenuSelection.payment_method)
async def process_payment_method(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    payment_method = message.text

    if payment_method == '–ù–∞–ª–∏—á–Ω—ã–µ':
        payment_info = '–ù–∞–ª–∏—á–Ω—ã–µ'
    elif payment_method == '–ö–∞—Ä—Ç–∞':
        payment_info = '–ö–∞—Ä—Ç–∞'
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.")
        return

    async with state.proxy() as data:
        table_number = data['table_number']
        datetime = data['datetime']
        dish_id = data['dish_id']

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ó–∞–∫–∞–∑—ã
    order_id = add_order(table_number, datetime, payment_info)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ó–∞–∫–∞–∑—ã_–ë–ª—é–¥–∞
    add_dish_to_order(order_id, dish_id)

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    await message.answer("–°–∫–æ—Ä–æ –∫ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class TableBooking(StatesGroup):
    TYPE = State()          # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–æ–ª–∏–∫–∞
    TABLE = State()         # –í—ã–±–æ—Ä —Å—Ç–æ–ª–∏–∫–∞
    PHONE = State()         # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    NAME = State()          # –í–≤–æ–¥ –∏–º–µ–Ω–∏
    SURNAME = State()       # –í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
    DATE = State()          # –í—ã–±–æ—Ä –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è


@dp.callback_query_handler(lambda call: call.data == 'book')
async def handle_book(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–æ–ª–∏–∫–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*[types.KeyboardButton(type) for type in ['VIP', '–í –∑–∞–ª–µ', '–£ –æ–∫–Ω–∞']])
    await bot.send_message(callback_query.message.chat.id, "–ö–∞–∫–æ–π —Ç–∏–ø —Å—Ç–æ–ª–∏–∫–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await TableBooking.TYPE.set()


@dp.message_handler(state=TableBooking.TYPE)
async def handle_table_type(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        data['table_type'] = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∏–∫–∞—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    tables = get_tables_by_type(message.text)

    if tables:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–ª–∞—Ö
        table_info = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã:\n\n"
        for table in tables:
            table_number = table[0]
            table_seats = table[2]
            table_price = table[3]
            table_info += "üçΩ –°—Ç–æ–ª–∏–∫ {}: –ú–µ—Å—Ç–∞: {}, –¶–µ–Ω–∞: {} —Ä—É–±.\n".format(table_number, table_seats, table_price)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–ª–∞—Ö –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞
        message_text = "{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:".format(table_info)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(str(table[0])) for table in tables]
        keyboard.add(*buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–ª–∞—Ö –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞
        await message.answer(message_text, reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await TableBooking.TABLE.set()
    else:
        # –ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å—Ç–æ–ª–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã üòî")


@dp.message_handler(state=TableBooking.TABLE)
async def handle_table_selection(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        data['selected_table'] = message.text

    await message.answer("–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XXXX, –≥–¥–µ X - —Ü–∏—Ñ—Ä–∞.")
    await TableBooking.PHONE.set()


@dp.message_handler(state=TableBooking.PHONE)
async def handle_phone_number(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    pattern = r'^[78]\d{10}$'
    if not re.match(pattern, phone_number):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XXXX, –≥–¥–µ X - —Ü–∏—Ñ—Ä–∞.")
        return

    async with state.proxy() as data:
        data['phone_number'] = phone_number

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await TableBooking.NAME.set()


@dp.message_handler(state=TableBooking.NAME)
async def handle_name(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return

    name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    if not name.isalpha():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return

    async with state.proxy() as data:
        data['name'] = message.text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–º–∏–ª–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await TableBooking.SURNAME.set()


@dp.message_handler(state=TableBooking.SURNAME)
async def handle_surname(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return

    surname = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    if not surname.isalpha():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–º–∏–ª–∏–∏. –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return

    async with state.proxy() as data:
        data['surname'] = message.text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?(–§–æ—Ä–º–∞—Ç:–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)")
    await TableBooking.DATE.set()


@dp.message_handler(state=TableBooking.DATE)
async def handle_booking_date(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        data['booking_date'] = message.text

    booking_date = data['booking_date']

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        booking_date = datetime.datetime.strptime(booking_date, "%d.%m.%Y %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        table_available = check_table_availability(data['selected_table'], booking_date)
        if not table_available:
            await message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                                 "(–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ 45 –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥)")
            await TableBooking.DATE.set()
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
        book_table(data['selected_table'], booking_date, data['phone_number'], data['name'], data['surname'])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–∏–∫–µ
        table_info = get_table_info(data['selected_table'])

        if table_info:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∏–∫–µ
            table_number = table_info[0]
            table_type = table_info[1]
            table_seats = table_info[2]
            table_price = table_info[3]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–∏–∫–µ
            booking_info = "–í–∞—à —Å—Ç–æ–ª–∏–∫: {}\n–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {}\n–¢–∏–ø —Å—Ç–æ–ª–∞: {}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {}\n–¶–µ–Ω–∞: {}".format(
                table_number, booking_date, table_type, table_seats, table_price)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            keyboard = types.InlineKeyboardMarkup()

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å" —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ callback_data
            cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            modify_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="modify")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(cancel_button, modify_button)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–ª–∏–∫–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer("–°—Ç–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n{}".format(booking_info), reply_markup=keyboard)

        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–∏–∫–µ")
    except ValueError:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
        await TableBooking.DATE.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda call: call.data == 'cancel', state='*')
async def handle_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        selected_table = data.get('selected_table')
        booking_date = data.get('booking_date')

        if selected_table and booking_date:
            # –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cancel_booking(selected_table, booking_date)

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback_query.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–∏–∫–µ –∏ –¥–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
            # –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda call: call.data == 'modify', state=TableBooking.DATE)
async def handle_modify(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    async with state.proxy() as data:
        selected_table = data['selected_table']
        booking_date = data['booking_date']

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await TableBooking.DATE.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –∏ —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        data['selected_table'] = selected_table
        data['booking_date'] = booking_date


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
@dp.message_handler(state=TableBooking.DATE)
async def handle_modify_date(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    async with state.proxy() as data:
        selected_table = data['selected_table']
        booking_date = data['booking_date']
        new_date = message.text

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        new_date = datetime.datetime.strptime(new_date, "%d.%m.%Y %H:%M")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        update_booking(selected_table, booking_date, new_date)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.answer("–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {}".format(new_date))

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.finish()
    except ValueError:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query_handler(lambda c: c.data == 'support')
async def support(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram
    text = f"https://t.me/HLebZy"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.bot.send_message(callback_query.from_user.id, text)


class Delivery(StatesGroup):
    PHONE_NUMBER = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    NAME = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    SURNAME = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
    ADDRESS = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    SELECTED_DISHES = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    PAYMENT_METHOD = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞"
@dp.callback_query_handler(text='delivery')
async def process_delivery(callback_query: types.CallbackQuery):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XXXX, –≥–¥–µ X - —Ü–∏—Ñ—Ä–∞.:")
    await Delivery.PHONE_NUMBER.set()


@dp.message_handler(state=Delivery.PHONE_NUMBER)
async def process_delivery_phone_number(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    pattern = r'^[78]\d{10}$'
    if not re.match(pattern, phone_number):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +X (XXX) XXX-XXXX, –≥–¥–µ X - —Ü–∏—Ñ—Ä–∞.")
        return

    async with state.proxy() as data:
        data['phone_number'] = phone_number

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await Delivery.NAME.set()


@dp.message_handler(state=Delivery.NAME)
async def process_delivery_name(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    if not name.isalpha():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return

    async with state.proxy() as data:
        data['name'] = name

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–º–∏–ª–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await Delivery.SURNAME.set()


@dp.message_handler(state=Delivery.SURNAME)
async def process_delivery_surname(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    surname = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    if not surname.isalpha():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–º–∏–ª–∏–∏. –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return

    async with state.proxy() as data:
        data['surname'] = surname

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await Delivery.ADDRESS.set()



@dp.message_handler(state=Delivery.ADDRESS)
async def process_delivery_address(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        data['address'] = message.text

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        order_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data['order_datetime'] = order_datetime

    await show_dish_selection(message, state)


async def show_dish_selection(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        dishes = get_dishes()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–∞—Ö
        dish_info_message = "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"

        for dish_info in dishes:
            dish_id = dish_info[0]
            dish_name = dish_info[1]
            dish_info = get_dish_info(dish_id)
            if dish_info:
                dish_info_message += f"{dish_id} - {dish_name}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {dish_info[0]}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {dish_info[1]}\n–¶–µ–Ω–∞: {dish_info[2]} —Ä—É–±.\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –≤—ã–±–æ—Ä—É –±–ª—é–¥
        dish_info_message += "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ü—Ä–∏–º–µ—Ä: 1 2 3 4 5 6 7)"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(dish_info_message)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await Delivery.SELECTED_DISHES.set()


@dp.message_handler(state=Delivery.SELECTED_DISHES)
async def process_selected_dishes(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        selected_dishes = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
        for dish_id_str in message.text.split():
            if dish_id_str.isdigit():
                dish_id = int(dish_id_str)
                if is_dish_available(dish_id):
                    selected_dishes.append(dish_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –±–ª—é–¥–∞
        if not selected_dishes:
            await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if 'selected_dishes' in data:
            data['selected_dishes'].extend(selected_dishes)
        else:
            data['selected_dishes'] = selected_dishes

    await show_order_confirmation(message, state)


async def show_order_confirmation(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        selected_dishes_info = []

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞—Ö
        for dish_id_str in data['selected_dishes']:
            dish_id = int(dish_id_str)
            dish_info = get_dish_info(dish_id)
            if dish_info:
                selected_dishes_info.append(f"–ü–æ–∑–∏—Ü–∏—è: {dish_id}, {dish_info[0]}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        confirmation_message = "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n" \
                               "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}\n" \
                               "–ò–º—è: {}\n" \
                               "–§–∞–º–∏–ª–∏—è: {}\n" \
                               "–ê–¥—Ä–µ—Å: {}\n" \
                               "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {}\n\n" \
                               "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n{}".format(data['phone_number'], data['name'], data['surname'],
                                                             data['address'], data['order_datetime'],
                                                             '\n'.join(selected_dishes_info))
        await message.answer(confirmation_message)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(types.KeyboardButton("–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞"))
        keyboard.add(types.KeyboardButton("–û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await Delivery.PAYMENT_METHOD.set()



@dp.message_handler(state=Delivery.PAYMENT_METHOD)
async def process_payment_method(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await cmd_start(message)
        return
    async with state.proxy() as data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        payment_method = message.text
        if payment_method not in ["–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞", "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data['payment_method'] = payment_method

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        delivery_info = {
            'phone_number': data['phone_number'],
            'name': data['name'],
            'surname': data['surname'],
            'address': data['address'],
            'order_datetime': data['order_datetime'],
            'payment_method': data['payment_method']
        }
        delivery_id = add_delivery(delivery_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
        for dish_id in data['selected_dishes']:
            add_dish_to_delivery(delivery_id, dish_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞—Ö
        confirmation_message = "–í–∞—à —á–µ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n" \
                               "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}\n" \
                               "–ò–º—è: {}\n" \
                               "–§–∞–º–∏–ª–∏—è: {}\n" \
                               "–ê–¥—Ä–µ—Å: {}\n" \
                               "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {}\n" \
                               "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {}\n\n" \
                               "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n".format(data['phone_number'], data['name'], data['surname'],
                                                          data['address'], data['order_datetime'],
                                                          data['payment_method'])

        for dish_id in data['selected_dishes']:
            dish_info = get_dish_info(dish_id)
            if dish_info:
                dish_info_message = "–ü–æ–∑–∏—Ü–∏—è: {}, {}\n".format(dish_id, dish_info[0])
                confirmation_message += dish_info_message

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
        confirmation_message += "\n–í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä."

        await message.answer(confirmation_message)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
